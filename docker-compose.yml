version: '3.1'

services:
  akhq:
    image: tchiotludo/akhq:latest
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: "kafka:9092"
    ports:
      - "8082:8080"
    depends_on:
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  neo4j:
    container_name: neo4j
    image: neo4j:latest
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - ./neo4j_db/data:/data
      - ./neo4j_db/logs:/logs
      - ./neo4j_db/import:/var/lib/neo4j/import
      - ./neo4j_db/plugins:/plugins

  # Keycloak service for authentication and authorization
  keycloak:
    build:
      context: keycloak  # Build context for Keycloak
    container_name: keycloak  # Container name for easier identification
    environment:
      KEYCLOAK_ADMIN: admin  # Keycloak admin username
      KEYCLOAK_ADMIN_PASSWORD: admin  # Keycloak admin password
      KEYCLOAK_DATABASE_VENDOR: postgres  # Database vendor
      KC_DB: postgres  # Database name
      KC_DB_URL_HOST: db  # Database host
      KC_DB_URL_DATABASE: keycloak  # Database URL
      KC_DB_URL_PORT: 5432  # Database port
      KC_DB_USERNAME: robot  # Database username
      KC_DB_PASSWORD: password  # Database password
    ports:
      - '8081:8080'  # Expose Keycloak on port 8081
    volumes:
      - ./keystore.p12:/keystore.p12  # Volume for keystore
      - ./keycloak/themes/stopover:/opt/keycloak/themes/stopover  # Volume for Keycloak themes
    depends_on:
      - db  # Wait for the database to be ready

  # OpenSearch node 1
  opensearch-node1:
    image: opensearchproject/opensearch:latest  # OpenSearch image
    container_name: opensearch-node1  # Container name
    environment:
      - cluster.name=opensearch-cluster  # Cluster name
      - node.name=opensearch-node1  # Node name
      - discovery.seed_hosts=opensearch-node1,opensearch-node2  # Seed hosts for cluster discovery
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2  # Cluster manager nodes
      - bootstrap.memory_lock=true  # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"  # JVM heap sizes
      - "DISABLE_INSTALL_DEMO_CONFIG=true"  # Disable demo configuration
      - "DISABLE_SECURITY_PLUGIN=true"  # Disable security plugin
    ulimits:
      memlock:
        soft: -1  # Set memlock to unlimited (soft limit)
        hard: -1  # Set memlock to unlimited (hard limit)
      nofile:
        soft: 65536  # Maximum number of open files (soft limit)
        hard: 65536  # Maximum number of open files (hard limit)
    volumes:
      - opensearch-data1:/usr/share/opensearch/data  # Data volume
    ports:
      - "9200:9200"  # REST API port
      - "9600:9600"  # Performance Analyzer port

  # OpenSearch node 2
  opensearch-node2:
    image: opensearchproject/opensearch:latest  # OpenSearch image
    container_name: opensearch-node2  # Container name
    environment:
      - cluster.name=opensearch-cluster  # Cluster name
      - node.name=opensearch-node2  # Node name
      - discovery.seed_hosts=opensearch-node1,opensearch-node2  # Seed hosts for cluster discovery
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2  # Cluster manager nodes
      - bootstrap.memory_lock=true  # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"  # JVM heap sizes
      - "DISABLE_INSTALL_DEMO_CONFIG=true"  # Disable demo configuration
      - "DISABLE_SECURITY_PLUGIN=true"  # Disable security plugin
    ulimits:
      memlock:
        soft: -1  # Set memlock to unlimited (soft limit)
        hard: -1  # Set memlock to unlimited (hard limit)
      nofile:
        soft: 65536  # Maximum number of open files (soft limit)
        hard: 65536  # Maximum number of open files (hard limit)
    volumes:
      - opensearch-data2:/usr/share/opensearch/data  # Data volume

  # Redis service for caching
  redis:
    image: redis:6.2-alpine  # Redis image
    container_name: redis
    restart: always  # Always restart the container if it stops
    ports:
      - '6379:6379'  # Expose Redis on port 6379
    command: redis-server --save 20 1 --loglevel warning  # Redis command with configuration
    volumes:
      - cache:/data  # Data volume

  # PostgreSQL database service
  db:
    image: postgres  # PostgreSQL image
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Data volume
    environment:
      POSTGRES_USER: robot  # Database username
      POSTGRES_PASSWORD: password  # Database password
    ports:
      - '5432:5432'  # Expose PostgreSQL on port 5432

  # Web service for the Rails application
  web:
    build:
      context: graphql  # Build context for the Rails application
    container_name: web
    command: dockerize -wait tcp://db:5432 -timeout 30s bundle exec rails s -p 8080 -b '0.0.0.0'  # Command to start the Rails server
    environment:
      DATABASE_USERNAME: robot  # Database username
      DATABASE_PASSWORD: password  # Database password
      DATABASE_HOST: db  # Database host
      RAILS_MAX_THREADS: 20  # Maximum number of Rails threads
      REDIS_URL: redis://redis:6379/12  # Redis URL
      RAILS_ENV: ${RAILS_ENV:-development}   # Rails environment
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}  # Rails master key
      OPENSEARCH_URL: http://opensearch-node1:9200
    ports:
      - "8080:8080"  # Expose the Rails server on port 8080
    volumes:
      - ./graphql:/app/graphql  # Mount the source code directory as a volume
    depends_on:
      - db  # Wait for the database to be ready
      - redis  # Wait for Redis to be ready
      - opensearch-node1  # Wait for OpenSearch node 1 to be ready
      - opensearch-node2  # Wait for OpenSearch node 2 to be ready

  # Worker service for background jobs
  worker:
    build:
      context: graphql  # Build context for the Rails application
    container_name: worker
    command: dockerize -wait tcp://db:5432 -timeout 30s foreman start  # Command to start the background jobs
    environment:
      DATABASE_USERNAME: robot  # Database username
      DATABASE_PASSWORD: password  # Database password
      DATABASE_HOST: db  # Database host
      RAILS_MAX_THREADS: 20  # Maximum number of Rails threads
      REDIS_URL: redis://redis:6379/12  # Redis URL
      RAILS_ENV: ${RAILS_ENV:-development}   # Rails environment
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}  # Rails master key
      OPENSEARCH_URL: http://opensearch-node1:9200
    volumes:
      - ./graphql:/app/graphql  # Mount the source code directory as a volume
    depends_on:
      - db  # Wait for the database to be ready
      - redis  # Wait for Redis to be ready
      - opensearch-node1  # Wait for OpenSearch node 1 to be ready
      - opensearch-node2  # Wait for OpenSearch node 2 to be ready

networks:
  my_network:

# Define volumes for persistent storage
volumes:
  postgres_data: { }
  cache:
    driver: local
  opensearch-data1:
  opensearch-data2:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
