package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/stopover-org/stopover/data-compositor/internal/graphql/graph/model"
)

// RetryTask is the resolver for the retryTask field.
func (r *mutationResolver) RetryTask(ctx context.Context, id string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: RetryTask - retryTask"))
}

// TerminateTask is the resolver for the terminateTask field.
func (r *mutationResolver) TerminateTask(ctx context.Context, id string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: TerminateTask - terminateTask"))
}

// ScheduleNow is the resolver for the scheduleNow field.
func (r *mutationResolver) ScheduleNow(ctx context.Context, taskID string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: ScheduleNow - scheduleNow"))
}

// CreateScheduling is the resolver for the createScheduling field.
func (r *mutationResolver) CreateScheduling(ctx context.Context, input model.SchedulingInput) (*model.Scheduling, error) {
	panic(fmt.Errorf("not implemented: CreateScheduling - createScheduling"))
}

// UpdateScheduling is the resolver for the updateScheduling field.
func (r *mutationResolver) UpdateScheduling(ctx context.Context, input model.UpdateSchedulingInput) (*model.Scheduling, error) {
	panic(fmt.Errorf("not implemented: UpdateScheduling - updateScheduling"))
}

// ToggleScheduling is the resolver for the toggleScheduling field.
func (r *mutationResolver) ToggleScheduling(ctx context.Context, input model.ToggleSchedulingInput) (*model.Scheduling, error) {
	panic(fmt.Errorf("not implemented: ToggleScheduling - toggleScheduling"))
}

// RemoveScheduling is the resolver for the removeScheduling field.
func (r *mutationResolver) RemoveScheduling(ctx context.Context, scheduleID string) (*model.Scheduling, error) {
	panic(fmt.Errorf("not implemented: RemoveScheduling - removeScheduling"))
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id string) (*model.Task, error) {
	panic(fmt.Errorf("not implemented: Task - task"))
}

// Scheduling is the resolver for the scheduling field.
func (r *queryResolver) Scheduling(ctx context.Context, id string) (*model.Scheduling, error) {
	panic(fmt.Errorf("not implemented: Scheduling - scheduling"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
