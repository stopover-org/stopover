// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Event struct {
	ID      string `json:"id"`
	Message string `json:"message"`
}

type Mutation struct {
}

type Query struct {
}

type Scheduling struct {
	ID               string `json:"id"`
	TaskID           string `json:"taskId"`
	NextScheduleTime string `json:"nextScheduleTime"`
	Active           bool   `json:"active"`
}

type SchedulingInput struct {
	TaskID       string `json:"taskId"`
	ScheduleTime string `json:"scheduleTime"`
}

type Task struct {
	ID      string     `json:"id"`
	Status  TaskStatus `json:"status"`
	Retries int        `json:"retries"`
}

type ToggleSchedulingInput struct {
	ScheduleID string `json:"scheduleId"`
}

type UpdateSchedulingInput struct {
	ScheduleID      string `json:"scheduleId"`
	NewScheduleTime string `json:"newScheduleTime"`
}

type TaskStatus string

const (
	TaskStatusPending    TaskStatus = "PENDING"
	TaskStatusProcessing TaskStatus = "PROCESSING"
	TaskStatusSucceeded  TaskStatus = "SUCCEEDED"
	TaskStatusFailed     TaskStatus = "FAILED"
	TaskStatusTerminated TaskStatus = "TERMINATED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusPending,
	TaskStatusProcessing,
	TaskStatusSucceeded,
	TaskStatusFailed,
	TaskStatusTerminated,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusPending, TaskStatusProcessing, TaskStatusSucceeded, TaskStatusFailed, TaskStatusTerminated:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
