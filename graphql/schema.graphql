type Account implements Node {
  city: String
  country: String
  firm: Firm
  fullAddress: String
  id: ID!
  interests: [Interest!]
  latitude: Float
  longitude: Float
  name: String!
  phone: [String!]
  primaryPhone: String!
  region: String
  status: String!
  street: String
  trip(tripId: ID!): Trip!
  trips: [Trip!]!
  verifiedAt: String
}

type Achievement implements Node {
  id: ID!
  preview: String
  title: String!
}

type Attendee implements Node {
  attendeeOptions: [AttendeeOption!]!
  booking: Booking!
  email: String
  eventOptions: [EventOption!]!
  firstName: String
  fullName: String
  id: ID!
  isRegistered: Boolean
  lastName: String
  phone: String
}

type AttendeeOption implements Node {
  attendee: Attendee!
  attendeePrice: Money!
  builtIn: Boolean!
  eventOption: EventOption!
  id: ID!
  organizerPrice: Money!
}

input AttendeesFilter {
  bookingId: ID
  email: String
  eventId: ID
  firstName: String
  isRegistered: Boolean
  lastName: String
  phone: String
}

type Balance implements Node {
  firm: Firm!
  id: ID!
  totalAmount: Money!
}

"""
Autogenerated input type of BookEvent
"""
input BookEventInput {
  attendeesCount: Int!
  bookedFor: DateTime!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of BookEvent
"""
type BookEventPayload {
  accessToken: String
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Booking implements Node {
  alreadyPaidPrice: Money!
  attendeeTotalPrice: Money!
  attendees(filters: AttendeesFilter): [Attendee!]!
  bookedFor: DateTime!
  bookingOptions: [BookingOption!]!
  event: Event!
  eventOptions: [EventOption!]!
  id: ID!
  leftToPayPrice: Money!
  organizerTotalPrice: Money!
  paymentsType: Payment
  schedule: Schedule!
  status: String!
  trip: Trip!
}

type BookingCancellationOption implements Node {
  deadline: DateTime
  id: ID!
  penaltyPrice: Money
  status: BookingCancellationOptionStatusEnum
}

enum BookingCancellationOptionStatusEnum {
  """
  available cancellation option
  """
  active

  """
  disabled cancellation option
  """
  disabled
}

"""
The connection type for Booking.
"""
type BookingConnection {
  """
  A list of edges.
  """
  edges: [BookingEdge!]!

  """
  A list of nodes.
  """
  nodes: [Booking!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type BookingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Booking
}

type BookingOption implements Node {
  attendeePrice: Money!
  booking: Booking!
  builtIn: Boolean!
  eventOption: EventOption!
  id: ID!
  organizerPrice: Money!
}

input BookingsFilter {
  eventId: ID
  scheduledFor: DateTime
  status: String
  tripId: [ID!]
}

"""
Autogenerated input type of CancelBooking
"""
input CancelBookingInput {
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelBooking
"""
type CancelBookingPayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  trip: Trip
}

"""
Autogenerated input type of CancelTrip
"""
input CancelTripInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tripId: ID!
}

"""
Autogenerated return type of CancelTrip
"""
type CancelTripPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  trip: Trip
}

"""
Autogenerated input type of CanceledPayment
"""
input CanceledPaymentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentId: ID!
}

"""
Autogenerated return type of CanceledPayment
"""
type CanceledPaymentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payment: Payment
}

"""
Autogenerated input type of CreateCheckout
"""
input CreateCheckoutInput {
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentType: String!
}

"""
Autogenerated return type of CreateCheckout
"""
type CreateCheckoutPayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payment: Payment
  url: String
}

"""
Autogenerated input type of CreateEvent
"""
input CreateEventInput {
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String
  description: String!
  durationTime: String!
  endDate: DateTime!
  eventOptions: [CreateEventOptionInput!]
  eventType: EventTypeEnum!
  fullAddress: String!
  houseNumber: String
  images: [String!]
  interestIds: [ID!]
  latitude: Float
  longitude: Float
  maxAttendees: Int
  minAttendees: Int
  organizerPricePerUomCents: Int!
  recurringDates: [String!]!
  region: String
  requiresCheckIn: Boolean
  requiresContract: Boolean
  requiresPassport: Boolean
  singleDates: [String!]!
  street: String
  title: String!
  unitId: ID
}

input CreateEventOptionInput {
  builtIn: Boolean!
  organizerPriceCents: Int!
  title: String!
}

"""
Autogenerated return type of CreateEvent
"""
type CreateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event
}

"""
Autogenerated input type of CreateFirm
"""
input CreateFirmInput {
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contactPerson: String
  contacts: String
  country: String
  description: String
  fullAddress: String
  houseNumber: String
  image: String
  latitude: Float
  longitude: Float
  primaryEmail: String
  primaryPhone: String
  region: String
  status: String
  street: String
  title: String
  website: String
}

"""
Autogenerated return type of CreateFirm
"""
type CreateFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firm: Firm
}

"""
Autogenerated input type of CreateStripeAccount
"""
input CreateStripeAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateStripeAccount
"""
type CreateStripeAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  setupAccountUrl: String
}

type Currency {
  fullName: String!
  name: String!
  symbol: String!
}

"""
represents a timestamp of the ISO8601 format
"""
scalar DateTime

type Event implements Node {
  achievements: [Achievement!]!
  attendeePricePerUom: Money
  availableDates: [DateTime!]!
  averageRating: Float!
  booking(id: ID!): Booking
  bookingCancellationOptions: [BookingCancellationOption!]
  bookings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookingConnection!
  city: String
  country: String
  description: String!
  durationTime: String!
  endDate: DateTime
  eventOptions: [EventOption!]!
  eventType: EventTypeEnum!
  externalId: String
  firm: Firm!
  fullAddress: String
  houseNumber: String
  id: ID!
  images: [String!]!
  interests: [Interest!]!
  landmarks: String
  latitude: Float
  longitude: Float
  maxAttendees: Int
  minAttendees: Int
  myBookings: [Booking!]!
  organizerPricePerUom: Money
  prepaidAmount: Money!
  prepaidType: String
  ratingsCount: Int
  recurringDaysWithTime: [String!]!
  region: String
  requiresCheckIn: Boolean!
  requiresContract: Boolean!
  requiresPassport: Boolean!
  requiresPrepaid: Boolean!
  schedules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ScheduleConnection!
  singleDaysWithTime: [DateTime!]!
  status: String!
  street: String
  tags: [Tag!]!
  title: String!
  unit: Unit
}

"""
The connection type for Event.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge!]!

  """
  A list of nodes.
  """
  nodes: [Event!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Event
}

type EventFilters {
  city: String
  endDate: DateTime
  maxPrice: Money!
  minPrice: Money!
  startDate: DateTime
}

type EventOption implements Node {
  attendeePrice: Money!
  builtIn: Boolean!
  description: String
  forAttendee: Boolean!
  id: ID!
  organizerPrice: Money
  title: String!
}

enum EventTypeEnum {
  active_holiday
  business_breakfast

  """
  type for incity excursion with guide
  """
  excursion
  gastronomic
  in_town
  meetup
  music
  out_of_town
  sport_activity

  """
  type for offroad tour
  """
  tour
  workshop
}

input EventsFilter {
  city: String!
  endDate: DateTime
  maxPrice: Int!
  minPrice: Int!
  startDate: DateTime
  tags: [String!]
}

type Firm implements Node {
  accounts: [Account!]
  balance: Balance
  booking(id: ID!): Booking
  bookings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookingConnection!
  city: String
  contactPerson: String
  contacts: String
  country: String
  description: String
  event(id: ID!): Event
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  fullAddress: String
  houseNumber: String
  id: ID!
  image: String
  latitude: Float
  longitude: Float
  payments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaymentConnection!
  primaryEmail: String!
  primaryPhone: String
  region: String
  schedules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ScheduleConnection!
  status: String
  street: String
  title: String!
  website: String
}

type Interest implements Node {
  id: ID!
  link: String
  preview: String
  slug: String!
  title: String!
}

input InterestsFilter {
  query: String
}

"""
represents money
"""
type Money {
  cents: Int!
  currency: Currency!
}

type Mutation {
  bookEvent(
    """
    Parameters for BookEvent
    """
    input: BookEventInput!
  ): BookEventPayload
  cancelBooking(
    """
    Parameters for CancelBooking
    """
    input: CancelBookingInput!
  ): CancelBookingPayload
  cancelTrip(
    """
    Parameters for CancelTrip
    """
    input: CancelTripInput!
  ): CancelTripPayload
  createCanceledPayment(
    """
    Parameters for CanceledPayment
    """
    input: CanceledPaymentInput!
  ): CanceledPaymentPayload
  createCheckout(
    """
    Parameters for CreateCheckout
    """
    input: CreateCheckoutInput!
  ): CreateCheckoutPayload
  createEvent(
    """
    Parameters for CreateEvent
    """
    input: CreateEventInput!
  ): CreateEventPayload
  createFirm(
    """
    Parameters for CreateFirm
    """
    input: CreateFirmInput!
  ): CreateFirmPayload
  createStripeAccount(
    """
    Parameters for CreateStripeAccount
    """
    input: CreateStripeAccountInput!
  ): CreateStripeAccountPayload
  createSuccessfulPayment(
    """
    Parameters for SuccessfulPayment
    """
    input: SuccessfulPaymentInput!
  ): SuccessfulPaymentPayload
  publishEvent(
    """
    Parameters for PublishEvent
    """
    input: PublishEventInput!
  ): PublishEventPayload
  registerAttendee(
    """
    Parameters for RegisterAttendee
    """
    input: RegisterAttendeeInput!
  ): RegisterAttendeePayload
  removeEvent(
    """
    Parameters for RemoveEvent
    """
    input: RemoveEventInput!
  ): RemoveEventPayload
  removeFirm(
    """
    Parameters for RemoveFirm
    """
    input: RemoveFirmInput!
  ): RemoveFirmPayload
  rescheduleEvent(
    """
    Parameters for RescheduleEvent
    """
    input: RescheduleEventInput!
  ): RescheduleEventPayload
  setUpAccount(
    """
    Parameters for SetUpAccount
    """
    input: SetUpAccountInput!
  ): SetUpAccountPayload
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload
  signOut(
    """
    Parameters for SignOut
    """
    input: SignOutInput!
  ): SignOutPayload
  unpublishEvent(
    """
    Parameters for UnpublishEvent
    """
    input: UnpublishEventInput!
  ): UnpublishEventPayload
  updateAttendee(
    """
    Parameters for UpdateAttendee
    """
    input: UpdateAttendeeInput!
  ): UpdateAttendeePayload
  updateBooking(
    """
    Parameters for UpdateBooking
    """
    input: UpdateBookingInput!
  ): UpdateBookingPayload
  updateEvent(
    """
    Parameters for UpdateEvent
    """
    input: UpdateEventInput!
  ): UpdateEventPayload
  updateFirm(
    """
    Parameters for UpdateFirm
    """
    input: UpdateFirmInput!
  ): UpdateFirmPayload
  verifyEvent(
    """
    Parameters for VerifyEvent
    """
    input: VerifyEventInput!
  ): VerifyEventPayload
  verifyFirm(
    """
    Parameters for VerifyFirm
    """
    input: VerifyFirmInput!
  ): VerifyFirmPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Payment implements Node {
  cancelUrl: String
  id: ID!
  status: String
  totalPrice: Money
  updatedAt: DateTime
}

"""
The connection type for Payment.
"""
type PaymentConnection {
  """
  A list of edges.
  """
  edges: [PaymentEdge!]!

  """
  A list of nodes.
  """
  nodes: [Payment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type PaymentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Payment
}

"""
Autogenerated input type of PublishEvent
"""
input PublishEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of PublishEvent
"""
type PublishEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event
}

type Query {
  bookings(filters: BookingsFilter): [Booking!]
  currentUser: User
  event(id: ID!): Event
  eventFilters(city: String): EventFilters!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: EventsFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  interests(filters: InterestsFilter): [Interest!]

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  schedules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: EventsFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ScheduleConnection!
  trips(filters: TripsFilter): [Trip!]
}

"""
Autogenerated input type of RegisterAttendee
"""
input RegisterAttendeeInput {
  attendeeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RegisterAttendee
"""
type RegisterAttendeePayload {
  attendee: Attendee

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of RemoveEvent
"""
input RemoveEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of RemoveEvent
"""
type RemoveEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event
}

"""
Autogenerated input type of RemoveFirm
"""
input RemoveFirmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RemoveFirm
"""
type RemoveFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firm: Firm
}

"""
Autogenerated input type of RescheduleEvent
"""
input RescheduleEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of RescheduleEvent
"""
type RescheduleEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event
}

type Schedule implements Node {
  bookings: [Booking!]!
  event: Event!
  id: ID!
  scheduledFor: DateTime!
  status: String!
}

"""
The connection type for Schedule.
"""
type ScheduleConnection {
  """
  A list of edges.
  """
  edges: [ScheduleEdge!]!

  """
  A list of nodes.
  """
  nodes: [Schedule!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ScheduleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Schedule
}

"""
Autogenerated input type of SetUpAccount
"""
input SetUpAccountInput {
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String!
  fullAddress: String!
  houseNumber: String
  interestIds: [ID!]
  latitude: Float
  longitude: Float
  name: String!
  primaryPhone: String!
  region: String
  street: String
}

"""
Autogenerated return type of SetUpAccount
"""
type SetUpAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  resetCode: Boolean
  type: SignInTypesEnum!
  username: String!
}

"""
Autogenerated return type of SignIn
"""
type SignInPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  delay: Int
  reason: String
  user: User
}

enum SignInTypesEnum {
  """
  allowed to sign in with email
  """
  email

  """
  allowed to sign in with phone
  """
  phone
}

"""
Autogenerated input type of SignOut
"""
input SignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignOut
"""
type SignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signedOut: Boolean
}

"""
Autogenerated input type of SuccessfulPayment
"""
input SuccessfulPaymentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentId: ID!
}

"""
Autogenerated return type of SuccessfulPayment
"""
type SuccessfulPaymentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  payment: Payment
}

type Tag implements Node {
  id: ID!
  link: String
  title: String!
}

type Trip implements Node {
  account: Account!
  attendeesCount: Int!
  bookings: [Booking!]!
  canCancel: Boolean!
  cities: [String!]!
  endDate: DateTime!
  id: ID!
  images: [String!]!
  startDate: DateTime!
  status: String!
}

input TripsFilter {
  bookings: [ID!]
  endDate: DateTime
  startDate: DateTime
}

type Unit implements Node {
  id: ID!
  name: String!
  preview: String
  unitType: String!
}

"""
Autogenerated input type of UnpublishEvent
"""
input UnpublishEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of UnpublishEvent
"""
type UnpublishEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event
}

"""
Autogenerated input type of UpdateAttendee
"""
input UpdateAttendeeInput {
  attendeeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String
  eventOptionIds: [ID!]
  firstName: String
  lastName: String
  phone: String
}

"""
Autogenerated return type of UpdateAttendee
"""
type UpdateAttendeePayload {
  attendee: Attendee

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateBooking
"""
input UpdateBookingInput {
  bookedFor: DateTime
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventOptionIds: [ID!]
  status: String
}

"""
Autogenerated return type of UpdateBooking
"""
type UpdateBookingPayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateEvent
"""
input UpdateEventInput {
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String
  description: String
  durationTime: String
  endDate: DateTime
  eventId: ID!
  eventOptions: [UpdateEventOptionInput!]
  eventType: EventTypeEnum
  fullAddress: String
  houseNumber: String
  images: [String!]
  interestIds: [ID!]
  latitude: Float
  longitude: Float
  maxAttendees: Int
  minAttendees: Int
  organizerPricePerUomCents: Int
  recurringDates: [String!]
  region: String
  requiresCheckIn: Boolean
  requiresContract: Boolean
  requiresPassport: Boolean
  singleDates: [String!]
  street: String
  title: String!
  unitId: ID
}

input UpdateEventOptionInput {
  builtIn: Boolean!
  forAttendee: Boolean!
  id: ID!
  organizerPriceCents: Int!
  title: String!
}

"""
Autogenerated return type of UpdateEvent
"""
type UpdateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event
}

"""
Autogenerated input type of UpdateFirm
"""
input UpdateFirmInput {
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contactPerson: String
  contacts: String
  country: String
  description: String
  fullAddress: String
  houseNumber: String
  image: String
  latitude: Float
  longitude: Float
  primaryEmail: String
  primaryPhone: String
  region: String
  status: String
  street: String
  title: String
  website: String
}

"""
Autogenerated return type of UpdateFirm
"""
type UpdateFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firm: Firm
}

type User implements Node {
  account: Account!
  email: String
  id: ID!
  phone: String
  serviceUser: Boolean!
  status: UserStatusEnum!
}

enum UserStatusEnum {
  """
  active user
  """
  active

  """
  inactive user
  """
  inactive

  """
  user was created for booking purposes
  """
  temporary
}

"""
Autogenerated input type of VerifyEvent
"""
input VerifyEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of VerifyEvent
"""
type VerifyEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event
}

"""
Autogenerated input type of VerifyFirm
"""
input VerifyFirmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of VerifyFirm
"""
type VerifyFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firm: Firm
}
