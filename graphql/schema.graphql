type Account implements Node {
  city: String
  country: String
  fullAddress: String
  id: ID!
  interests: [Interest!]
  latitude: Float
  longitude: Float
  name: String
  phone: [String!]
  primaryPhone: String
  region: String
  status: String!
  street: String
  verifiedAt: String
}

type Achievement implements Node {
  id: ID!
  preview: String
  title: String!
}

type Attendee implements Node {
  booking: Booking
  email: String
  firstName: String
  fullName: String
  id: ID!
  lastName: String
  phone: String
}

"""
Autogenerated input type of BookEvent
"""
input BookEventInput {
  attendeesCount: Int!
  bookedFor: DateTime!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of BookEvent
"""
type BookEventPayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type Booking implements Node {
  attendees: [Attendee!]
  bookedFor: DateTime!
  event: Event!
  eventOptions: [EventOption!]
  id: ID!
}

"""
Autogenerated input type of CreateEvent
"""
input CreateEventInput {
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String
  dates: [String!]
  description: String
  durationTime: Int
  eventOptions: [CreateEventOptionInput!]
  eventType: EventTypeEnum
  fullAddress: String!
  houseNumber: String
  interestIds: [ID!]
  latitude: Float
  longitude: Float
  organizerPricePerUomCents: Int
  recurringType: RecurringTypeEnum
  region: String
  requiresCheckIn: Boolean
  requiresContract: Boolean
  requiresPassport: Boolean
  street: String
  title: String!
  unitId: ID
}

input CreateEventOptionInput {
  builtIn: Boolean!
  organizerPriceCents: Int!
  title: String!
}

"""
Autogenerated return type of CreateEvent
"""
type CreateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  event: Event
}

"""
represents a timestamp of the ISO8601 format
"""
scalar DateTime

type Event implements Node {
  achievements: [Achievement!]
  attendeePricePerUomCents: Int!
  availableDates: [DateTime!]!
  averageRating: Float
  city: String
  country: String
  description: String!
  durationTime: String!
  eventOptions: [EventOption!]!
  eventType: EventTypeEnum!
  fullAddress: String!
  houseNumber: String
  id: ID!
  images: [String!]!
  interests: [Interest!]!
  latitude: Float
  longitude: Float
  organizerPricePerUomCents: Int
  ratingsCount: Int
  recurringDaysWithTime: [String!]
  recurringType: RecurringTypeEnum
  region: String
  requiresCheckIn: Boolean
  requiresContract: Boolean
  requiresPassport: Boolean
  singleDaysWithTime: [String!]
  status: String!
  street: String
  tags: [Tag!]!
  title: String!
  unit: Unit!
}

"""
The connection type for Event.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge!]!

  """
  A list of nodes.
  """
  nodes: [Event!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Event
}

type EventFilters {
  city: String
  endDate: DateTime
  maxPrice: Int!
  minPrice: Int!
  startDate: DateTime
}

type EventOption implements Node {
  attendeePriceCents: Int!
  builtIn: Boolean
  id: ID!
  organizerPriceCents: Int
  title: String!
}

enum EventTypeEnum {
  """
  type for incity excursion with guide
  """
  excursion

  """
  type for offroad tour
  """
  tour
}

input EventsFilter {
  city: String!
  endDate: DateTime
  maxPrice: Int!
  minPrice: Int!
  startDate: DateTime
}

type Interest implements Node {
  id: ID!
  link: String
  preview: String
  slug: String!
  title: String!
}

input InterestsFilter {
  query: String
}

type Mutation {
  bookEvent(
    """
    Parameters for BookEvent
    """
    input: BookEventInput!
  ): BookEventPayload
  createEvent(
    """
    Parameters for CreateEvent
    """
    input: CreateEventInput!
  ): CreateEventPayload
  setUpAccount(
    """
    Parameters for SetUpAccount
    """
    input: SetUpAccountInput!
  ): SetUpAccountPayload
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload
  updateAttendee(
    """
    Parameters for UpdateAttendee
    """
    input: UpdateAttendeeInput!
  ): UpdateAttendeePayload
  updateBooking(
    """
    Parameters for UpdateBooking
    """
    input: UpdateBookingInput!
  ): UpdateBookingPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  bookings(id: ID!): [Booking!]
  currentUser: User
  event(id: ID!): Event
  eventFilters(city: String): EventFilters!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: EventsFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  interests(filters: InterestsFilter): [Interest!]

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  trips: [Trip!]
}

enum RecurringTypeEnum {
  """
  uses for non recurring type of events
  """
  general

  """
  uses for recurring events
  """
  recurrent
}

"""
Autogenerated input type of SetUpAccount
"""
input SetUpAccountInput {
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String!
  fullAddress: String!
  houseNumber: String
  interestIds: [ID!]
  latitude: Float
  longitude: Float
  name: String!
  primaryPhone: String!
  region: String
  street: String
}

"""
Autogenerated return type of SetUpAccount
"""
type SetUpAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  user: User
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  type: SignInTypesEnum!
  username: String!
}

"""
Autogenerated return type of SignIn
"""
type SignInPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  delay: Int
  user: User
}

enum SignInTypesEnum {
  """
  allowed to sign in with email
  """
  email

  """
  allowed to sign in with phone
  """
  phone
}

type Tag implements Node {
  id: ID!
  link: String
  title: String!
}

type Trip implements Node {
  bookings: [Booking!]
  cities: [String!]
  id: ID!
  maxDate: DateTime
  minDate: DateTime
}

type Unit implements Node {
  id: ID!
  name: String!
  preview: String
  unitType: String!
}

"""
Autogenerated input type of UpdateAttendee
"""
input UpdateAttendeeInput {
  attendeeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  firstName: String!
  lastName: String!
  phoneNumber: String!
}

"""
Autogenerated return type of UpdateAttendee
"""
type UpdateAttendeePayload {
  attendee: Attendee

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated input type of UpdateBooking
"""
input UpdateBookingInput {
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  status: String!
}

"""
Autogenerated return type of UpdateBooking
"""
type UpdateBookingPayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

type User implements Node {
  account: Account!
  email: String
  id: ID!
  phone: String
}
