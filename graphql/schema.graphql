type Account implements Node {
  address: Address
  dateOfBirth: DateTime
  firm: Firm
  firms: [Firm!]!
  id: ID!
  interests: [Interest!]
  name: String
  phones: [String!]
  primaryEmail: String
  primaryPhone: String
  status: String!
  trip(tripId: ID!): Trip!
  trips: [Trip!]!
  user: User!
  verifiedAt: String
}

"""
The connection type for Account.
"""
type AccountConnection {
  """
  A list of edges.
  """
  edges: [AccountEdge!]!

  """
  A list of nodes.
  """
  nodes: [Account!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  total: Int
}

"""
An edge in a connection.
"""
type AccountEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Account
}

"""
Autogenerated input type of AddAttendee
"""
input AddAttendeeInput {
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AddAttendee.
"""
type AddAttendeePayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

type Address implements Node {
  city: String
  country: String
  fullAddress: String
  houseNumber: String
  id: ID!
  latitude: Float
  longitude: Float
  region: String
  street: String
}

type Attendee implements Node {
  attendeeOptions: [AttendeeOption!]!
  booking: Booking!
  email: String
  eventOptions: [EventOption!]!
  firstName: String
  fullName: String
  id: ID!
  lastName: String
  phone: String
  place: [Int!]
  status: AttendeeStatusEnum!
}

type AttendeeOption implements Node {
  attendee: Attendee!
  attendeePrice: Money!
  eventOption: EventOption!
  id: ID!
  organizerPrice: Money!
  status: EventOptionStatusEnum!
}

enum AttendeeStatusEnum {
  """
  default value
  """
  not_registered

  """
  user had come to the event
  """
  registered

  """
  user was removed by manager
  """
  removed
}

input AttendeesFilter {
  bookingId: ID
  eventId: ID
  status: [AttendeeStatusEnum!]
}

type Balance implements Node {
  firm: Firm!
  id: ID!
  processingPayments: Money!
  successfulPayments: Money!
  totalAmount: Money!
}

"""
Autogenerated input type of BookEvent
"""
input BookEventInput {
  attendeesCount: Int
  bookedFor: DateTime!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String
  eventId: ID!
  phone: String
  places: [[Int!]!]
}

"""
Autogenerated return type of BookEvent.
"""
type BookEventPayload {
  accessToken: String
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

type Booking implements Node {
  account: Account!
  alreadyPaidPrice: Money!
  attendeeTotalPrice: Money!
  attendees(filters: AttendeesFilter): [Attendee!]!
  bookedFor: DateTime!
  bookingOptions: [BookingOption!]!
  cancellationTerms: String!
  contactEmail: String
  contactPhone: String
  event: Event!
  eventOptions: [EventOption!]!
  id: ID!
  leftToPayDepositPrice: Money!
  leftToPayPrice: Money!
  organizerTotalPrice: Money!
  paymentType: String
  payments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaymentConnection!
  possiblePenaltyAmount: Money!
  possibleRefundAmount: Money!
  refunds(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RefundConnection!
  schedule: Schedule!
  status: String!
  trip: Trip!
}

type BookingCancellationOption implements Node {
  deadline: Int!
  description: String!
  id: ID!
  penaltyPrice: Money!
  status: BookingCancellationOptionStatusEnum!
}

enum BookingCancellationOptionStatusEnum {
  """
  available cancellation option
  """
  active

  """
  disabled cancellation option
  """
  inactive

  """
  removed cancellation option
  """
  removed
}

"""
Autogenerated return type of BookingChanged.
"""
type BookingChangedPayload {
  booking: Booking
}

"""
The connection type for Booking.
"""
type BookingConnection {
  """
  A list of edges.
  """
  edges: [BookingEdge!]!

  """
  A list of nodes.
  """
  nodes: [Booking!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  total: Int
}

"""
An edge in a connection.
"""
type BookingEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Booking
}

type BookingOption implements Node {
  attendeePrice: Money!
  booking: Booking!
  eventOption: EventOption!
  id: ID!
  organizerPrice: Money!
  status: EventOptionStatusEnum!
}

input BookingsFilter {
  bookedFor: DateTime
  contactEmail: String
  contactPhone: String
  eventIds: [ID!]
}

"""
Autogenerated input type of CancelBooking
"""
input CancelBookingInput {
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelBooking.
"""
type CancelBookingPayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
  trip: Trip
}

"""
Autogenerated input type of CancelTrip
"""
input CancelTripInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  tripId: ID!
}

"""
Autogenerated return type of CancelTrip.
"""
type CancelTripPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
  trip: Trip
}

"""
Autogenerated input type of ChangeAttendeeOptionAvailability
"""
input ChangeAttendeeOptionAvailabilityInput {
  attendeeOptionId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ChangeAttendeeOptionAvailability.
"""
type ChangeAttendeeOptionAvailabilityPayload {
  attendeeOption: AttendeeOption

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

"""
Autogenerated input type of ChangeBookingOptionAvailability
"""
input ChangeBookingOptionAvailabilityInput {
  bookingOptionId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ChangeBookingOptionAvailability.
"""
type ChangeBookingOptionAvailabilityPayload {
  bookingOption: BookingOption

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

"""
Autogenerated input type of ChangeEventOptionAvailability
"""
input ChangeEventOptionAvailabilityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventOptionId: ID!
}

"""
Autogenerated return type of ChangeEventOptionAvailability.
"""
type ChangeEventOptionAvailabilityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  eventOption: EventOption
  notification: String
}

input CreateBookingCancellationOptionInput {
  deadline: Int!
  description: String!
  penaltyPriceCents: Int!
}

"""
Autogenerated input type of CreateCheckout
"""
input CreateCheckoutInput {
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentType: PaymentTypesEnum!
}

"""
Autogenerated return type of CreateCheckout.
"""
type CreateCheckoutPayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
  payment: Payment
  url: String
}

"""
Autogenerated input type of CreateEvent
"""
input CreateEventInput {
  bookingCancellationOptions: [CreateBookingCancellationOptionInput!]
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String
  depositAmountCents: Int!
  description: String!
  durationTime: String!
  endDate: DateTime
  eventOptions: [CreateEventOptionInput!]
  eventType: EventTypeEnum!
  fullAddress: String
  houseNumber: String
  images: [String!]
  interestIds: [ID!]
  language: String
  latitude: Float
  longitude: Float
  maxAttendees: Int
  minAttendees: Int
  organizerPricePerUomCents: Int!
  recurringDates: [String!]!
  region: String
  requiresCheckIn: Boolean
  requiresContract: Boolean
  requiresDeposit: Boolean
  requiresPassport: Boolean
  singleDates: [String!]!
  street: String
  title: String!
}

input CreateEventOptionInput {
  builtIn: Boolean!
  forAttendee: Boolean
  organizerPriceCents: Int!
  title: String!
}

"""
Autogenerated return type of CreateEvent.
"""
type CreateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  event: Event
  notification: String
}

"""
Autogenerated input type of CreateFirm
"""
input CreateFirmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  paymentTypes: [String!]!
  primaryEmail: String
  title: String
}

"""
Autogenerated return type of CreateFirm.
"""
type CreateFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  firm: Firm
  notification: String
}

"""
Autogenerated input type of CreatePlacement
"""
input CreatePlacementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
  heightPlaces: Int!
  title: String!
  widthPlaces: Int!
}

"""
Autogenerated return type of CreatePlacement.
"""
type CreatePlacementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  eventPlacement: EventPlacement
  notification: String
}

"""
Autogenerated input type of CreateStripeAccount
"""
input CreateStripeAccountInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateStripeAccount.
"""
type CreateStripeAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
  setupAccountUrl: String
}

type Currency {
  fullName: String!
  name: String!
  symbol: String!
}

"""
represents a timestamp of the ISO8601 format
"""
scalar DateTime

"""
Autogenerated input type of DeclineStripeConnect
"""
input DeclineStripeConnectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  soft: Boolean!
  stripeConnectId: ID!
}

"""
Autogenerated return type of DeclineStripeConnect.
"""
type DeclineStripeConnectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
  stripeConnect: StripeConnect
}

"""
Autogenerated input type of DeregisterAttendee
"""
input DeregisterAttendeeInput {
  attendeeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeregisterAttendee.
"""
type DeregisterAttendeePayload {
  attendee: Attendee

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

type Event implements Node {
  address: Address
  attendeePricePerUom: Money
  availableDates: [DateTime!]!
  averageRating: Float!
  bookingCancellationOptions: [BookingCancellationOption!]!
  bookings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BookingsFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookingConnection
  depositAmount: Money!
  description: String!
  durationTime: String!
  endDate: DateTime
  eventOptions: [EventOption!]!
  eventPlacements: [EventPlacement!]!
  eventType: EventTypeEnum!
  externalId: String
  featured: Boolean
  firm: Firm!
  id: ID!
  images: [String!]!
  interests: [Interest!]!
  landmarks: String
  language: String!
  maxAttendees: Int
  minAttendees: Int
  myBookings: [Booking!]!
  organizerPricePerUom: Money
  ratingsCount: Int
  recurringDaysWithTime: [String!]!
  requiresCheckIn: Boolean!
  requiresContract: Boolean!
  requiresDeposit: Boolean!
  requiresPassport: Boolean!
  schedules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SchedulesFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ScheduleConnection!
  singleDaysWithTime: [DateTime!]!
  statistics: [Statistics!]!
  status: String!
  stripeIntegrations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): StripeIntegrationConnection!
  title: String!
  tourPlan: TourPlan
  tourPlans: [TourPlan!]
}

"""
The connection type for Event.
"""
type EventConnection {
  """
  A list of edges.
  """
  edges: [EventEdge!]!

  """
  A list of nodes.
  """
  nodes: [Event!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  total: Int
}

"""
An edge in a connection.
"""
type EventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Event
}

type EventFilters {
  city: String
  endDate: DateTime
  maxPrice: Money!
  minPrice: Money!
  startDate: DateTime
}

type EventOption implements Node {
  attendeePrice: Money!
  builtIn: Boolean!
  description: String
  event: Event!
  forAttendee: Boolean!
  id: ID!
  organizerPrice: Money
  status: EventOptionStatusEnum!
  title: String!
}

enum EventOptionStatusEnum {
  """
  default value. this option available for booking
  """
  available

  """
  this option is not available for booking
  """
  not_available
}

type EventPlacement implements Node {
  event: Event!
  heightPlaces: Int!
  id: ID!
  places: [EventPlacementPlace!]!
  title: String!
  widthPlaces: Int!
}

type EventPlacementPlace {
  available: Boolean!
  coordinates: [Int!]!
}

enum EventTypeEnum {
  active_holiday
  business_breakfast

  """
  type for incity excursion with guide
  """
  excursion
  gastronomic
  in_town
  meetup
  music
  out_of_town
  sport_activity

  """
  type for offroad tour
  """
  tour
  workshop
}

type EventsAutocomplete {
  bookings: [Booking!]!
  events: [Event!]!
  interests: [Interest!]!
}

input EventsFilter {
  city: String
  endDate: DateTime
  featured: Boolean
  firmId: ID
  interests: [String!]
  maxPrice: Int
  minPrice: Int
  query: String
  startDate: DateTime
  today: Boolean
}

type Firm implements Node {
  accounts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): AccountConnection
  address: Address
  availablePaymentMethods: [String!]
  balance: Balance
  booking(id: ID!): Booking
  bookings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BookingsFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookingConnection
  contactPerson: String
  contacts: String
  contractAddress: String
  description: String
  event(id: ID!): Event
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    backend: Boolean

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: EventsFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  eventsAutocomplete(ids: [ID!], query: String!): EventsAutocomplete!
  id: ID!
  image: String
  margin: Int
  payment(id: ID!): Payment
  paymentTypes: [String!]!
  payments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PaymentConnection
  primaryEmail: String
  primaryPhone: String
  schedule(id: ID!): Schedule
  schedules(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: SchedulesFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ScheduleConnection
  status: String!
  stripeConnects: [StripeConnect!]
  title: String!
  website: String
}

type Interest implements Node {
  id: ID!
  preview: String
  slug: String!
  sourceTitle: String!
  title: String!
}

"""
Autogenerated input type of InviteUser
"""
input InviteUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
}

"""
Autogenerated return type of InviteUser.
"""
type InviteUserPayload {
  account: Account

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

"""
represents money
"""
type Money {
  cents: Int!
  currency: Currency!
}

type Mutation {
  addAttendee(
    """
    Parameters for AddAttendee
    """
    input: AddAttendeeInput!
  ): AddAttendeePayload
  bookEvent(
    """
    Parameters for BookEvent
    """
    input: BookEventInput!
  ): BookEventPayload
  cancelBooking(
    """
    Parameters for CancelBooking
    """
    input: CancelBookingInput!
  ): CancelBookingPayload
  cancelTrip(
    """
    Parameters for CancelTrip
    """
    input: CancelTripInput!
  ): CancelTripPayload
  changeAttendeeOptionAvailability(
    """
    Parameters for ChangeAttendeeOptionAvailability
    """
    input: ChangeAttendeeOptionAvailabilityInput!
  ): ChangeAttendeeOptionAvailabilityPayload
  changeBookingOptionAvailability(
    """
    Parameters for ChangeBookingOptionAvailability
    """
    input: ChangeBookingOptionAvailabilityInput!
  ): ChangeBookingOptionAvailabilityPayload
  changeEventOptionAvailability(
    """
    Parameters for ChangeEventOptionAvailability
    """
    input: ChangeEventOptionAvailabilityInput!
  ): ChangeEventOptionAvailabilityPayload
  createCheckout(
    """
    Parameters for CreateCheckout
    """
    input: CreateCheckoutInput!
  ): CreateCheckoutPayload
  createEvent(
    """
    Parameters for CreateEvent
    """
    input: CreateEventInput!
  ): CreateEventPayload
  createFirm(
    """
    Parameters for CreateFirm
    """
    input: CreateFirmInput!
  ): CreateFirmPayload
  createPlacement(
    """
    Parameters for CreatePlacement
    """
    input: CreatePlacementInput!
  ): CreatePlacementPayload
  createStripeAccount(
    """
    Parameters for CreateStripeAccount
    """
    input: CreateStripeAccountInput!
  ): CreateStripeAccountPayload
  declineStripeConnect(
    """
    Parameters for DeclineStripeConnect
    """
    input: DeclineStripeConnectInput!
  ): DeclineStripeConnectPayload
  deregisterAttendee(
    """
    Parameters for DeregisterAttendee
    """
    input: DeregisterAttendeeInput!
  ): DeregisterAttendeePayload
  inviteUser(
    """
    Parameters for InviteUser
    """
    input: InviteUserInput!
  ): InviteUserPayload
  publishEvent(
    """
    Parameters for PublishEvent
    """
    input: PublishEventInput!
  ): PublishEventPayload
  registerAttendee(
    """
    Parameters for RegisterAttendee
    """
    input: RegisterAttendeeInput!
  ): RegisterAttendeePayload
  removeAttendee(
    """
    Parameters for RemoveAttendee
    """
    input: RemoveAttendeeInput!
  ): RemoveAttendeePayload
  removeEvent(
    """
    Parameters for RemoveEvent
    """
    input: RemoveEventInput!
  ): RemoveEventPayload
  removeFirm(
    """
    Parameters for RemoveFirm
    """
    input: RemoveFirmInput!
  ): RemoveFirmPayload
  rescheduleEvent(
    """
    Parameters for RescheduleEvent
    """
    input: RescheduleEventInput!
  ): RescheduleEventPayload
  setCurrentFirm(
    """
    Parameters for SetCurrentFirm
    """
    input: SetCurrentFirmInput!
  ): SetCurrentFirmPayload
  signIn(
    """
    Parameters for SignIn
    """
    input: SignInInput!
  ): SignInPayload
  signOut(
    """
    Parameters for SignOut
    """
    input: SignOutInput!
  ): SignOutPayload
  syncStripe(
    """
    Parameters for SyncStripe
    """
    input: SyncStripeInput!
  ): SyncStripePayload
  unpublishEvent(
    """
    Parameters for UnpublishEvent
    """
    input: UnpublishEventInput!
  ): UnpublishEventPayload
  updateAccount(
    """
    Parameters for UpdateAccount
    """
    input: UpdateAccountInput!
  ): UpdateAccountPayload
  updateAttendee(
    """
    Parameters for UpdateAttendee
    """
    input: UpdateAttendeeInput!
  ): UpdateAttendeePayload
  updateBooking(
    """
    Parameters for UpdateBooking
    """
    input: UpdateBookingInput!
  ): UpdateBookingPayload
  updateEvent(
    """
    Parameters for UpdateEvent
    """
    input: UpdateEventInput!
  ): UpdateEventPayload
  updateFirm(
    """
    Parameters for UpdateFirm
    """
    input: UpdateFirmInput!
  ): UpdateFirmPayload
  updatePlacement(
    """
    Parameters for UpdatePlacement
    """
    input: UpdatePlacementInput!
  ): UpdatePlacementPayload
  verifyEvent(
    """
    Parameters for VerifyEvent
    """
    input: VerifyEventInput!
  ): VerifyEventPayload
  verifyFirm(
    """
    Parameters for VerifyFirm
    """
    input: VerifyFirmInput!
  ): VerifyFirmPayload
  verifyStripeConnect(
    """
    Parameters for VerifyStripeConnect
    """
    input: VerifyStripeConnectInput!
  ): VerifyStripeConnectPayload
  withdrawBalance(
    """
    Parameters for WithdrawBalance
    """
    input: WithdrawBalanceInput!
  ): WithdrawBalancePayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Payment implements Node {
  booking: Booking!
  createdAt: DateTime!
  id: ID!
  paymentType: PaymentTypesEnum
  refunds(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RefundConnection!
  status: String!
  totalPrice: Money!
  updatedAt: DateTime!
}

"""
The connection type for Payment.
"""
type PaymentConnection {
  """
  A list of edges.
  """
  edges: [PaymentEdge!]!

  """
  A list of nodes.
  """
  nodes: [Payment!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  total: Int
}

"""
An edge in a connection.
"""
type PaymentEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Payment
}

enum PaymentTypesEnum {
  """
  Deposit only
  """
  deposit

  """
  Full amount
  """
  full_amount
}

type Payout implements Node {
  createdAt: DateTime!
  id: ID!
  status: String!
  totalAmount: Money!
  updatedAt: DateTime!
}

"""
Autogenerated input type of PublishEvent
"""
input PublishEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of PublishEvent.
"""
type PublishEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  event: Event
  notification: String
}

type Query {
  booking(id: ID!): Booking
  currentUser: User!
  event(id: ID!): Event
  eventFilters(city: String): EventFilters!
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: EventsFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): EventConnection!
  eventsAutocomplete(ids: [ID!], query: String!): EventsAutocomplete!
  firm(id: ID!): Firm
  interests: [Interest!]!

  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node

  """
  Fetches a list of objects given a list of IDs.
  """
  nodes(
    """
    IDs of the objects.
    """
    ids: [ID!]!
  ): [Node]!
  trips: [Trip!]!
}

type Refund implements Node {
  booking: Booking!
  createdAt: DateTime!
  id: ID!
  penaltyAmount: Money!
  status: String!
  totalAmount: Money!
  updatedAt: DateTime!
}

"""
The connection type for Refund.
"""
type RefundConnection {
  """
  A list of edges.
  """
  edges: [RefundEdge!]!

  """
  A list of nodes.
  """
  nodes: [Refund!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  total: Int
}

"""
An edge in a connection.
"""
type RefundEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Refund
}

"""
Autogenerated input type of RegisterAttendee
"""
input RegisterAttendeeInput {
  attendeeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RegisterAttendee.
"""
type RegisterAttendeePayload {
  attendee: Attendee

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

"""
Autogenerated input type of RemoveAttendee
"""
input RemoveAttendeeInput {
  attendeeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RemoveAttendee.
"""
type RemoveAttendeePayload {
  attendee: Attendee
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

"""
Autogenerated input type of RemoveEvent
"""
input RemoveEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of RemoveEvent.
"""
type RemoveEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  event: Event
  notification: String
}

"""
Autogenerated input type of RemoveFirm
"""
input RemoveFirmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RemoveFirm.
"""
type RemoveFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  firm: Firm
  notification: String
}

"""
Autogenerated input type of RescheduleEvent
"""
input RescheduleEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of RescheduleEvent.
"""
type RescheduleEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  event: Event
  notification: String
}

type Schedule implements Node {
  availablePlacesPlacement: [EventPlacementPlace!]
  bookedPlaces: Int
  bookings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    filters: BookingsFilter

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BookingConnection!
  event: Event!
  id: ID!
  leftPlaces: Int
  scheduledFor: DateTime!
  statistics: [Statistics!]!
  status: String!
}

"""
The connection type for Schedule.
"""
type ScheduleConnection {
  """
  A list of edges.
  """
  edges: [ScheduleEdge!]!

  """
  A list of nodes.
  """
  nodes: [Schedule!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  total: Int
}

"""
An edge in a connection.
"""
type ScheduleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Schedule
}

input SchedulesFilter {
  eventIds: [ID!]
  includePast: Boolean
  scheduledFor: DateTime
}

"""
Autogenerated input type of SetCurrentFirm
"""
input SetCurrentFirmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  firmId: ID!
}

"""
Autogenerated return type of SetCurrentFirm.
"""
type SetCurrentFirmPayload {
  account: Account

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  firm: Firm
  notification: String
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  code: String
  resetCode: Boolean
  type: SignInTypesEnum!
  username: String!
}

"""
Autogenerated return type of SignIn.
"""
type SignInPayload {
  accessToken: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  delay: Int
  errors: [String!]
  notification: String
  reason: String
  user: User
}

enum SignInTypesEnum {
  """
  allowed to sign in with email
  """
  email

  """
  allowed to sign in with phone
  """
  phone
}

"""
Autogenerated input type of SignOut
"""
input SignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignOut.
"""
type SignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
  signedOut: Boolean
}

type Statistics {
  name: String!
  value: Float!
}

type StripeConnect implements Node {
  activatedAt: DateTime
  createdAt: DateTime!
  firm: Firm!
  id: String!
  status: StripeConnectStatusEnum!
  updatedAt: DateTime!
}

enum StripeConnectStatusEnum {
  """
  active stripe integration
  """
  active

  """
  stripe connect was out of sync
  """
  inactive

  """
  default value. stripe connect was just initialized
  """
  pending

  """
  stripe connect was removed
  """
  removed
}

type StripeIntegration implements Node {
  id: ID!
  priceId: String!
  productId: String!
  status: StripeIntegrationStatusEnum!
  stripeableId: String!
  stripeableType: String!
  version: Int!
}

"""
The connection type for StripeIntegration.
"""
type StripeIntegrationConnection {
  """
  A list of edges.
  """
  edges: [StripeIntegrationEdge!]!

  """
  A list of nodes.
  """
  nodes: [StripeIntegration!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  total: Int
}

"""
An edge in a connection.
"""
type StripeIntegrationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: StripeIntegration
}

enum StripeIntegrationStatusEnum {
  """
  default value. stripe integration was initialized
  """
  active

  """
  stripe integration was removed
  """
  removed
}

type Subscription {
  bookingChanged(bookingId: ID!): BookingChangedPayload!
}

"""
Autogenerated input type of SyncStripe
"""
input SyncStripeInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of SyncStripe.
"""
type SyncStripePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  event: Event
  notification: String
}

type TourPlace implements Node {
  description: String
  durationTime: String
  id: ID!
  image: String
  title: String!
}

type TourPlan implements Node {
  description: String
  id: ID!
  image: String
  title: String!
  tourPlaces: [TourPlace!]
}

type Trip implements Node {
  account: Account!
  attendeesCount: Int!
  bookings: [Booking!]!
  canCancel: Boolean!
  cities: [String!]!
  endDate: DateTime
  id: ID!
  images: [String!]!
  startDate: DateTime
  status: String!
}

"""
Autogenerated input type of UnpublishEvent
"""
input UnpublishEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of UnpublishEvent.
"""
type UnpublishEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  event: Event
  notification: String
}

"""
Autogenerated input type of UpdateAccount
"""
input UpdateAccountInput {
  city: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String!
  dateOfBirth: DateTime
  name: String!
  primaryEmail: String!
  primaryPhone: String!
  region: String!
}

"""
Autogenerated return type of UpdateAccount.
"""
type UpdateAccountPayload {
  account: Account!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

"""
Autogenerated input type of UpdateAttendee
"""
input UpdateAttendeeInput {
  attendeeId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String
  eventOptionIds: [ID!]
  firstName: String
  lastName: String
  phone: String
}

"""
Autogenerated return type of UpdateAttendee.
"""
type UpdateAttendeePayload {
  attendee: Attendee

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

input UpdateBookingCancellationOptionInput {
  deadline: Int!
  description: String!
  id: ID
  penaltyPriceCents: Int!
}

"""
Autogenerated input type of UpdateBooking
"""
input UpdateBookingInput {
  bookedFor: DateTime
  bookingId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventOptionIds: [ID!]
}

"""
Autogenerated return type of UpdateBooking.
"""
type UpdateBookingPayload {
  booking: Booking

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
}

"""
Autogenerated input type of UpdateEvent
"""
input UpdateEventInput {
  bookingCancellationOptions: [UpdateBookingCancellationOptionInput!]
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  country: String
  depositAmountCents: Int
  description: String
  durationTime: String
  endDate: DateTime
  eventId: ID!
  eventOptions: [UpdateEventOptionInput!]
  eventType: EventTypeEnum
  fullAddress: String
  houseNumber: String
  images: [String!]
  interestIds: [ID!]
  language: String
  latitude: Float
  longitude: Float
  maxAttendees: Int
  minAttendees: Int
  organizerPricePerUomCents: Int
  recurringDates: [String!]
  region: String
  requiresCheckIn: Boolean
  requiresContract: Boolean
  requiresDeposit: Boolean
  requiresPassport: Boolean
  singleDates: [String!]
  street: String
  title: String
  tourPlan: UpdateTourPlanInput
}

input UpdateEventOptionInput {
  builtIn: Boolean!
  forAttendee: Boolean
  id: ID
  organizerPriceCents: Int!
  title: String!
}

"""
Autogenerated return type of UpdateEvent.
"""
type UpdateEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  event: Event
  notification: String
}

"""
Autogenerated input type of UpdateFirm
"""
input UpdateFirmInput {
  availablePaymentMethods: [String!]
  city: String

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  contactPerson: String
  contacts: String
  contractAddress: String
  country: String
  description: String
  fullAddress: String
  houseNumber: String
  image: String
  latitude: Float
  longitude: Float
  margin: Int
  paymentTypes: [String!]
  primaryEmail: String
  primaryPhone: String
  region: String
  status: String
  street: String
  title: String
  website: String
}

"""
Autogenerated return type of UpdateFirm.
"""
type UpdateFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  firm: Firm
  notification: String
}

"""
Autogenerated input type of UpdatePlacement
"""
input UpdatePlacementInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  heightPlaces: Int!
  placementId: ID!
  title: String!
  widthPlaces: Int!
}

"""
Autogenerated return type of UpdatePlacement.
"""
type UpdatePlacementPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  eventPlacement: EventPlacement
  notification: String
}

input UpdateTourPlaceInput {
  description: String
  durationTime: String
  id: ID
  image: String
  title: String!
}

input UpdateTourPlanInput {
  description: String
  id: ID
  image: String
  title: String!
  tourPlaces: [UpdateTourPlaceInput!]!
}

type User implements Node {
  account: Account!
  email: String
  id: ID!
  phone: String
  serviceUser: Boolean!
  status: UserStatusEnum!
}

enum UserStatusEnum {
  """
  active user
  """
  active

  """
  user was disabled
  """
  disabled

  """
  inactive user
  """
  inactive

  """
  user was created for booking purposes
  """
  temporary
}

"""
Autogenerated input type of VerifyEvent
"""
input VerifyEventInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  eventId: ID!
}

"""
Autogenerated return type of VerifyEvent.
"""
type VerifyEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  event: Event
  notification: String
}

"""
Autogenerated input type of VerifyFirm
"""
input VerifyFirmInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of VerifyFirm.
"""
type VerifyFirmPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  firm: Firm
  notification: String
}

"""
Autogenerated input type of VerifyStripeConnect
"""
input VerifyStripeConnectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  stripeConnectId: ID!
}

"""
Autogenerated return type of VerifyStripeConnect.
"""
type VerifyStripeConnectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
  stripeConnect: StripeConnect
}

"""
Autogenerated input type of WithdrawBalance
"""
input WithdrawBalanceInput {
  amountCents: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of WithdrawBalance.
"""
type WithdrawBalancePayload {
  balance: Balance

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  notification: String
  payout: Payout
}
